TP使用: MCA,MVC
--> 基本步骤:
* 1:下载
* 2:安装 -> 直接访问,自动生成 
* 3:URL规则 -> mca
* 4:绑定入口模块 (非必须,注意事项
* 5.渲染模版,模版中使用数据,display,assign,{$} <froeach></foreach>
* 6.页面跳转,模版中数据的提交,U(),I, 
* 7.业务逻辑处理,数据库处理
客户端(浏览器,js)/服务端(php)
M:简单,没有类,D:有类, 所有模块通用的模型(Apps/Model/)
* 8.细节补充,样式优化

整体排版参考:
http://v3.bootcss.com/examples/dashboard/


*** 功能:
前台:
    1:头:  首页,用户,购物车,订单,帮助
    2:左侧栏目: 一级栏目,二级栏目/状态筛选
    3:内容: 商品/用户信息/购物车列表/订单列表/帮助

后台:
    头:用户,消息,注销
    1:左侧:(模块)  个人面板/用户管理/商家管理/平台管理/商品管理/订单管理/
    2:内容: 列表->详情 

*** 权限:
后台:
    商家:个人面板,商品,订单
    管理员:所有

*** 样式:
    导航头:
    左侧菜单:(前台,后台)
    内容列表:(商品展示列表,购物车列表,用户)
    弹出框:
    下拉按钮:
    提示类: alert,border,text,callout

*** ajax 操作
    jquery请求 -> 发起
    testController -> editGoodsAjax -> 返回数据
    dom操作返回 -> 更新数据 -> 返回数据量大,需要更新的标签比较多



                 ----------------- 模版
                1.找好模版
                * 控制器,模型 => 生成  \T和ink\Bulid::bulid_Model  bulid_controller -> 方法  indexControlelr -> create 
	
                * 主页模版 => 通用
                * 列表页,详情页,修改页,分页
                2.确定模版中的样式,脚本,资源所放的位置

                Public, 参考one_think   
                -> install/conf/conf.php   :配置   
                -> public 目录             :放
                -> Admin/View/public/ 下的模版  :使用

                3.修改TP模版中的常量配置信息
                4.整理常用的控件: 登录,验证码,错误提示,列表,宫格列表,弹出框  通常有自己的积累 -> 翻以前项目

                5.添加基础模版:Base/base.html  header.html left.html
                体现封装思想: 父类(通用的,不用每次复制),子类

                ------------------ 流程

                6.整理功能菜单,梳理功能流程, 如:
                登录 -> 主页菜单

                    GoodsController 
                        index() -> goodslist() [search,sort,filte]
                        创建一个模型 -> 设置条件 -> 关联表(商家,品牌,分类) -> (查哪些字段) -> 查询 -> array -> this-assign 

                        -> html ->  <foreach> {$arr[name]}

                        showAdd() -> html -> input -> submit -> doAdd() -> I(post.name,brandid) -> 逻辑判断 -> 创建一个模型 -> add($arr,$goodsinfo) -> 提示 -> 跳转列表

                        showinfo() -> 获取到数据 -> this->assign  -> html -> {$info.name}  -> button 



                商品管理 
                -> 列表页(带搜索<输入>,排序<单选>,筛选<复选>)
                -> 添加商品 -> 添加的界面(输入信息,选择,单选,多选) -> 添加的操作
                用户管理
                -> 列表页(带搜索,排序,筛选)
                商家管理
                -> 列表页(带搜索,排序,筛选)
                订单管理
                -> 列表页(带搜索,排序,筛选)
                广告管理
                -> 列表页(带搜索,排序,筛选)
                -> 新增广告
                平台设置
                -> 管理员管理(列表,添加,修改,删除)
                信息统计
                -> 待定


      
             * 1:下载 -> thinkphp 百度
             * 2:安装 -> 访问根目录 (自动生成 模块根目录,默认模块 Home)  可以自定义应用根目录文件夹名称
             * 3:URL规则 -> mca:模块,控制器,操作  index.php?m=Home&c=Index&a=index 或者 index.php/Home/Index/index
             * 4:绑定入口模块 -> 入口文件中添加 define('BIND_MODULE','Admin');
             * 5.完善模版展现,添加模版操作 -> 跳转 U 的使用
             * 6.模版 -> 控制器的跳转,传值 -> 界面到逻辑
             * 7.获取提交的数据,模型初始化,数据查询,验证,返回
             * 8.细节补充



              * 梳理项目流程: 进入首页开始 
              * 功能流程: -> 经历和使用的模块,界面,步骤1,2,3
              * 细节流程: -> 实现某个功能块,需要的界面展现,数据传值,逻辑处理,数据操作,返回下一步 步骤1,2,3
              *       



             * M-V-C
             * 两两之间如何关联,传值,调用
     

            1.访问首页
        *   2.判断有没有登录过,
        *      2.1登录打印用户信息
        *      2.2未登录跳转登录页面
        *        2.2.1读取cookie缓存的账号,在登录页面显示
        *      2.3.填写账号密码信息,登录
        *      2.4跳转到登录操作
        *      2.5查询登录账号,账号不存在,提示跳转
        *      2.6账号存在,密码错误,提示跳转
        *      2,7登录成功,跳转首页
        *  
 * 
 * 
 * 
 *       ThinkPHP 的输出
 *        a.通过echo等原生的输出方式在页面中输出
 *        b.同过display方法输出
 *            想分配的变量可以使用assign方法
 *        c.修改左右界定符
 *               修改配置文件中的配置项
 *                'TMPL_L_DELIM'    =>    '<{',  修改左定界符
 *                'TMPL_R_DELIM'    =>    '>}',  修改右定界符
 *        ThinkPHP 的模型使用
 *           
 *             $user = new Model('User');
 *            M方法实例化模型
 *             $user = M('User');
 *            
 *         CURD操作:
 *             对数据的读取 Read
 *             $user = M('User');
 *             select
 *             $user->select();  //获取所有数据,以数组形式返回
 *             find
 *             $user->find($id);    //获取单条数据,以数据形式返回
 *             getField(字段名)   获取一个具体的字段值
 *             $arr = $user->where('id=2')->getField('username');
 *             print_r($arr);
 * 
 *             对数据添加 Create
 *             $user = new Model('User');
 *             $user->字段名=值;
 *             $user->add();     //返回值是新增的id号
 *            
 *             对数据删除  Delete
 *             $user = new Model('User');
 *             $user->delete(2);
 *             $user->where('id=2')->delete();  返回值是收影响的行数
 * 
 * 
 *             对数据更新 Update
 *             $user = M('User');
 *             $data['id']=1;
 *             $data['username']='李四';
 *             $user->save($data);    //返回值是收影响的行数




--> MVC 整理:
*************************
Model
/*
    model-> 子类或model的对象
     单表: 增删改查:   
	 add($arr)  :只支持数组
	 data($arr)->add(); : 支持对象和字符串
	 field() :写固定字段 
	     
	 delete('id,id,id')
	 ->where('id=1 OR status=1')->delete() 
	
	 where('id=5')->save($data); 自己属性未更改
	 where('id=5')->save();  :自己对象的属性已经更改 

 	 select();
	 field()->where()->page()->order() 
		
     多表: 增删改查, 事务 
	增: 忽略
	删改: 先准备条件 -> 执行删改 
	查: join 别名
	     join('INNER LEFT RIGHT')->where() 
	     $list = $m->join();
	 事务: 
	     startTrans()
	     commit()
	     rollback()
	     // 开启事务  步骤 1,2,3
	     $m = M('Order');
	     $m-> add();
	     $m->table('goods')->where('id=10')->save('totalnum=10');
	     // 提交
 * 
 */

*************************
View 

/*
 *  View-> Template(mca) -> 显示/交互 (渲染,数据 )
 *  模版路径: MCA
 *  数据:  控制器  <-->   模版 
 *  {$var}  {:U()}
 *       assign, 
 *       U('MCA'):  GET,POST/FORM,AJAX 
 *       本身:  显示: 输出 变量,常量,系统等等
 *	    数据处理: 函数,运算,遍历,交互

*************************
Controller
做纷发(方法),流程,逻辑
M->C, 读取 
C->V, 渲染
V->C, 提交
C->M, 保存






----------------- 模版
1.找好模版
2.确定模版中的样式,脚本,资源所放的位置

Public, 参考one_think   
-> install/conf/conf.php   :配置   
-> public 目录             :放
-> Admin/View/public/ 下的模版  :使用

3.修改TP模版中的常量配置信息
4.整理常用的控件: 登录,验证码,错误提示,列表,宫格列表,弹出框  通常有自己的积累 -> 翻以前项目
5.添加基础模版:Base/base.html  header.html  left.html
体现封装思想: 父类(通用的,不用每次复制),子类


------------------ 流程
 
6.整理功能菜单,梳理功能流程, 如:
登录 -> 主页菜单
    
    GoodsController 
        index() -> goodslist() [search,sort,filte]
        创建一个模型 -> 设置条件 -> 关联表(商家,品牌,分类) -> (查哪些字段) -> 查询 -> array -> this-assign 

        -> html ->  <foreach> {$arr[name]}

        showAdd() -> html -> input -> submit -> doAdd() -> I(post.name,brandid) -> 逻辑判断 -> 创建一个模型 -> add($arr,$goodsinfo) -> 提示 -> 跳转列表


        showinfo() -> 获取到数据 -> this->assign  -> html -> {$info.name}  -> button 



    商品管理 
    -> 列表页(带搜索<输入>,排序<单选>,筛选<复选>)
    -> 添加商品 -> 添加的界面(输入信息,选择,单选,多选) -> 添加的操作
    用户管理
    -> 列表页(带搜索,排序,筛选)
    商家管理
    -> 列表页(带搜索,排序,筛选)
    订单管理
    -> 列表页(带搜索,排序,筛选)
    广告管理
    -> 列表页(带搜索,排序,筛选)
    -> 新增广告
    平台设置
    -> 管理员管理(列表,添加,修改,删除)
    信息统计
    -> 待定


---> 控制器中的纷发 
1.控制器新建
Goods,Login 
Goods: 
    index(): 商品列表
    add():展示添加页面
    doAdd(): 提交,验证,数据库
    edit():展示修改页面
    doEdit():提交数据
    showInfo():展示详情页面 
    check():快速审核,下架 
    delete():删除



  B2B2C : business(商) 商家 到 商家 到 用户
  B2C: 
  B2B: 
    // 线上:网络上 ,线下:见面
    // O2O   线上到线下
    // 用户,客户,终端,个体  C
    // 商家,厂家,         B
    /*

      会用状态,会用标志的思想: status,falg : 0 1 2 3 状态: 订单,商品,送外卖,数据库解决实际问题的手段

      id
      userid comment '用户id,关联tb_user.id' // 自营商城 B2C
      shopid comment '商家id,关联tb_shop.id' // B2B2C,淘宝

      ordermoney comment '订单金额' // 原价,优惠金额,支付金额,抵扣金额
      orderstatus comment '订单金额'  订单状态 0:未支付 1:未发货 2:未签收 3:未评价 4:完成 11:超时 12:取消
      commentfalg
      note
      addr
      status
      createtime
      updatetime

     */

  控制器的类,模型的类
  控制器的方法,模型的方法
  控制器中的方法 -> 调用模型的相关方法
  添加简单的页面操作 -> 连接到控制器
  逻辑和数据 为主
    ################################################################## Controller

    # BrandController
     品牌列表 brandList
     添加品牌 add,doAdd
     修改品牌 edit,doEdit
     品牌详情 info

    #CategoryController
     栏目列表 catList
     添加栏目 add,doAdd
     修改栏目 edit,doEdit
     栏目详情 info

    #GoodsController
     商品列表 goodsList
     添加商品 add,doAdd
     修改商品 edit,doEdit
     商品详情 info
     搜索商品 doSearch

    #LoginController
     登录 login,doLogin
     注册 registe,doRegiste 
     修改密码 editPwd,doEditPwd


    #OrderController
     订单列表 index/orderList
     订单详情 info
     生成订单 submitOrder
     订单操作(支付,取消,发货,收货,申请退款,)

    #ShopController
     列表 shopList/index
     详情 shopInfo
     添加 -> add,doAdd
     修改 -> edit,doEdit
     导入 -> import
     删除,批量删除 deleteUser(userids)
     审核/批量审核(关闭店铺,关闭一批店铺)

    #UserController
     列表 userlist/index
     详情 userinfo
     添加 -> add,doAdd
     修改 -> edit,doEdit
     导入 -> import
     删除,批量删除 deleteUser(userids)

    ##################################################################### Model

    #AdminModel
     登录 => login($loginid,$passwd) => $userinfo(flase)
     登出
     static 获取权限列表 => getOptions($uid) => optionList
     static 管理员列表 => getAdminlist($roleid,$status)

    #BrandModel
     品牌列表(父级id:0为根列表,搜索关键字,排序标志)-> 无需分页,获取所有
     添加品牌
     修改品牌
     品牌详情

    #CategoryModel
     栏目列表(父级id:0为根列表,搜索关键字,排序标志) -> 无需分页,获取所有
     添加栏目
     修改栏目
     栏目详情


    #GoodsModel
     获取商品列表(页数,分类id,品牌id,搜索关键字,排序标志)
     获取商品详情(商品id)
     修改商品(商品信息)
     添加商品,批量添加(导入)
     删除商品,批量删除(商品id)
     审核(上架/下架)(商品id,操作标志:0下架,1上架)
     批量审核(商品ids) -> 审核为上架状态

    #OrderModel
     订单列表(页数,搜索关键字,商家id,订单id,用户id,排序标志)
     订单操作(订单id,操作标志:0支付,1发货,2确认收货,10取消)
     生成订单(用户id,)
     订单支付(订单id,支付信息)
     订单评价(订单id,评价信息)
     申请退款(订单id,申请原因,备注)
     退款操作
     订单超时处理(订单id,30min未支付则不能支付) => 通常是由定时任务执行

    #UserModel
     注册
     登录
     登出
     修改密码
     用户列表(页数,搜索关键字,有效状态,排序标志)
